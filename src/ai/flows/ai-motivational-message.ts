
'use server';
/**
 * @fileOverview An AI flow to generate a personalized motivational message.
 */

console.log('<<<<< DEBUG: ai-motivational-message.ts SCRIPT EXECUTING - TOP OF FILE >>>>>');

import {ai} from '@/ai/genkit';
import {z} from 'zod';

const MotivationalMessageInputSchema = z.object({
  userName: z.string().describe('The name of the user.'),
  todaysEvents: z.array(z.string()).optional().describe("A list of today's scheduled calendar event titles or summaries. Can be empty."),
  userTasksSummary: z.array(z.string()).optional().describe('A list of summaries for tasks assigned to the user. Can be empty.'),
});
export type MotivationalMessageInput = z.infer<typeof MotivationalMessageInputSchema>;

const MotivationalMessageOutputSchema = z.object({
  message: z.string().describe('The personalized and motivational message generated by the AI.'),
});
export type MotivationalMessageOutput = z.infer<typeof MotivationalMessageOutputSchema>;

const jsonMotivationalPrompt = ai.definePrompt({
  name: 'jsonMotivationalPrompt_v3_debug', // New unique name for debugging
  input: { schema: MotivationalMessageInputSchema }, // Use the full input schema
  output: { schema: MotivationalMessageOutputSchema },
  prompt: `You are a friendly and encouraging assistant.
Generate a short, uplifting, and personalized motivational message for {{userName}}.
Consider these details if available:
- Today's events: {{#if todaysEvents}}{{#each todaysEvents}}- {{{this}}}{{/each}}{{else}}No specific events listed.{{/if}}
- User's tasks: {{#if userTasksSummary}}{{#each userTasksSummary}}- {{{this}}}{{/each}}{{else}}No specific tasks listed.{{/if}}

Your response MUST be a JSON object adhering to this schema:
{
  "type": "object",
  "properties": {
    "message": {
      "type": "string",
      "description": "The personalized and motivational message generated by the AI."
    }
  },
  "required": ["message"]
}
Example JSON output: { "message": "Hello {{userName}}, have a fantastic day accomplishing your tasks!" }
Make sure the message is appropriate and positive.
If events or tasks are provided, try to incorporate them naturally into the message if it makes sense.
Keep the message concise, ideally one or two sentences.
Username: {{userName}}
Today's Events: {{#if todaysEvents}}{{#each todaysEvents}} {{{this}}} {{/each}}{{else}}None{{/if}}
User Tasks: {{#if userTasksSummary}}{{#each userTasksSummary}} {{{this}}} {{/each}}{{else}}None{{/if}}
`,
});


export async function generateMotivationalMessage(input: MotivationalMessageInput): Promise<MotivationalMessageOutput> {
  console.log('<<<<< DEBUG: generateMotivationalMessage FUNCTION CALLED >>>>>');
  const apiKeyExists = !!process.env.GOOGLE_API_KEY;
  const apiKeyLength = process.env.GOOGLE_API_KEY?.length || 0;
  console.log(`[AI Motivational Flow - JSON DEBUG] GOOGLE_API_KEY Check: Exists: ${apiKeyExists}, Length (approx): ${apiKeyLength > 0 ? 'Non-zero' : 'Zero'}`);
  console.log(`[AI Motivational Flow - JSON DEBUG] ENTERING for user: ${input.userName}. Full input received: ${JSON.stringify(input)}`);

  try {
    console.log(`[AI Motivational Flow - JSON DEBUG] CALLING JSON PROMPT (jsonMotivationalPrompt_v3_debug) with input: ${JSON.stringify(input)}`);

    const { output } = await jsonMotivationalPrompt(input);

    console.log(`[AI Motivational Flow - JSON DEBUG] RAW OUTPUT from jsonMotivationalPrompt_v3_debug for ${input.userName}:`, output);

    if (output && typeof output.message === 'string' && output.message.trim() !== '') {
      console.log(`[AI Motivational Flow - JSON DEBUG] SUCCESS for ${input.userName}. Parsed message: "${output.message.trim()}"`);
      return { message: output.message.trim() };
    }
    
    const rawResponseForLog = output ? JSON.stringify(output) : "Output was undefined";
    console.warn(`[AI Motivational Flow - JSON DEBUG] AI message prompt returned null, empty message, or malformed output for user ${input.userName}. Parsed output: ${rawResponseForLog}. Falling back.`);
    return { message: `Merhaba ${input.userName}, AI mesajı alınamadı (JSON_PARSE_FAIL_V3_DEBUG).` };

  } catch (promptError: any) {
    console.error(
      `[AI Motivational Flow - JSON DEBUG] CRITICAL PROMPT ERROR - JSON (jsonMotivationalPrompt_v3_debug) for user ${input.userName}.
      Error Name: ${promptError.name}
      Message: ${promptError.message}
      Input to prompt: ${JSON.stringify(input)}
      Stack: ${promptError.stack || 'No stack available'}
      Falling back.`
    );
    return { message: `Merhaba ${input.userName}, AI mesajı oluşturulurken kritik bir sunucu hatası oluştu (Kod: PROMPT_EXEC_FAIL_JSON_V3_DEBUG). Lütfen API anahtarınızı ve model erişiminizi kontrol edin.` };
  }
}
