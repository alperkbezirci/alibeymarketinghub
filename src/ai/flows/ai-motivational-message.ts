
'use server';
/**
 * @fileOverview An AI flow to generate a motivational message based on
 * the user's tasks and calendar events.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

// Original Schemas (keep these for the exported function's signature)
const OriginalMotivationalMessageInputSchema = z.object({
  userName: z.string().describe('The name of the user.'),
  todaysEvents: z.array(z.string()).optional().describe('A list of today\'s scheduled calendar event titles or summaries. Empty if no events.'),
  userTasksSummary: z.array(z.string()).optional().describe('A list of summaries for tasks assigned to the user, e.g., ["Proje X (Devam Ediyor)", "Proje Y (Tamamlandı)"]. Empty if no tasks.'),
});
export type MotivationalMessageInput = z.infer<typeof OriginalMotivationalMessageInputSchema>;

const MotivationalMessageOutputSchema = z.object({
  message: z.string().describe('The personalized and motivational message generated by the AI.'),
});
export type MotivationalMessageOutput = z.infer<typeof MotivationalMessageOutputSchema>;

// Simplest prompt definition for testing
const motivationalPrompt = ai.definePrompt({
  name: 'generateMotivationalMessagePrompt_MinimalTest', // Changed name to avoid potential conflicts
  // input and output schemas are removed for this test to see if the call itself works
  prompt: `Kullanıcı Adı: {{userName}}. Görevin: Bu kullanıcı için kısa ve pozitif bir motivasyon mesajı oluştur. Yanıtını KESİNLİKLE ve SADECE {"message": "üretilecek mesaj buraya"} formatında JSON olarak ver. Başka hiçbir metin ekleme.`,
});

// Exported function still accepts the original input type for consistency with calling component
export async function generateMotivationalMessage(input: MotivationalMessageInput): Promise<MotivationalMessageOutput> {
  console.log(`[AI Motivational Flow] ENTERING generateMotivationalMessage for user ${input.userName}`);
  
  // Prepare the minimal input for this test
  const minimalPromptInputValue = { userName: input.userName };
  console.log(`[AI Motivational Flow] Calling motivationalPrompt_MinimalTest for user ${input.userName}. Input to AI (MINIMAL): ${JSON.stringify(minimalPromptInputValue, null, 2)}`);

  try {
    const response = await motivationalPrompt(minimalPromptInputValue); // Pass minimal input
    
    const rawModelText = response.text; // Genkit 1.x direct text access
    console.log(`[AI Motivational Flow] Raw AI text response for user ${input.userName}:`, rawModelText);

    let parsedMessage: string | null = null;

    if (rawModelText) {
      try {
        // Attempt to find JSON within the raw text, as models sometimes add extra text
        const jsonMatch = rawModelText.match(/{[\s\S]*}/);
        if (jsonMatch && jsonMatch[0]) {
            const parsedJson = JSON.parse(jsonMatch[0]);
            if (parsedJson && typeof parsedJson.message === 'string' && parsedJson.message.trim() !== '') {
                parsedMessage = parsedJson.message.trim();
                console.log(`[AI Motivational Flow] Successfully parsed message from AI: "${parsedMessage}"`);
            } else {
                console.warn(`[AI Motivational Flow] AI response's JSON object lacked a 'message' string or it was empty. Parsed JSON:`, parsedJson);
            }
        } else {
             console.warn(`[AI Motivational Flow] No JSON object found in AI response. Raw text was: "${rawModelText}"`);
        }
      } catch (parseError: any) {
        console.warn(`[AI Motivational Flow] Failed to parse AI response as JSON. Error: ${parseError.message}. Raw text was: "${rawModelText}"`);
      }
    }

    if (parsedMessage) {
      console.log(`[AI Motivational Flow] Successfully generated AI motivational message for ${input.userName}.`);
      return { message: parsedMessage };
    }
    
    console.warn(`[AI Motivational Flow] Could not extract a valid message from AI response for user ${input.userName}. Raw text was: "${rawModelText || 'empty'}". Falling back.`);
    return { message: `Harika bir gün geçirmenizi dileriz, ${input.userName}! (Sistem varsayılan mesajı - AI YANIT PARSE EDILEMEDI)` };

  } catch (promptError: any) {
    console.error(
      `[AI Motivational Flow] CRITICAL Error DURING motivationalPrompt call for user ${input.userName}. Error Name: ${promptError.name}, Message: ${promptError.message}. Stack: ${promptError.stack}. Input (MINIMAL): ${JSON.stringify(minimalPromptInputValue)}. Falling back.`,
    );
    // This fallback is for errors in the await motivationalPrompt(...) call itself
    return { message: `Merhaba ${input.userName}, motivasyon mesajı oluşturulurken AI modeliyle iletişimde bir sorun oluştu (Kod: MODEL_CALL_FAILED). API anahtarınızı veya model erişiminizi kontrol edin. Lütfen daha sonra tekrar deneyin.` };
  }
}
