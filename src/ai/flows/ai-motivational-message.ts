
'use server';
/**
 * @fileOverview An AI flow to generate a motivational message based on
 * the user's tasks and calendar events.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const MotivationalMessageInputSchema = z.object({
  userName: z.string().describe('The name of the user.'),
  todaysEvents: z.array(z.string()).optional().describe("A list of today's scheduled calendar event titles or summaries. Can be empty."),
  userTasksSummary: z.array(z.string()).optional().describe('A list of summaries for tasks assigned to the user, e.g., ["Proje X (Devam Ediyor)", "Proje Y (Tamamlandı)"]. Can be empty.'),
});
export type MotivationalMessageInput = z.infer<typeof MotivationalMessageInputSchema>;

const MotivationalMessageOutputSchema = z.object({
  message: z.string().describe('The personalized and motivational message generated by the AI.'),
});
export type MotivationalMessageOutput = z.infer<typeof MotivationalMessageOutputSchema>;

const motivationalPrompt = ai.definePrompt({
  name: 'generateMotivationalMessagePrompt', // Restore original or keep a distinct name
  input: { schema: MotivationalMessageInputSchema },
  output: { schema: MotivationalMessageOutputSchema },
  prompt: `Sen kullanıcıları motive eden, son derece pozitif, esprili ve yapıcı bir asistansın.
Çok Önemli: Yanıtın KESİNLİKLE ve SADECE aşağıdaki JSON formatında olmalıdır. JSON bloğunun ÖNCESİNDE veya SONRASINDA kesinlikle başka hiçbir metin, açıklama veya karakter olmamalıdır.
{
  "message": "üretilecek kişiselleştirilmiş mesaj buraya gelecek"
}
---
Kullanıcı Adı: {{userName}}

{{#if todaysEvents.length}}
Bugünün Takvim Etkinlikleri:
{{#each todaysEvents}}
- {{{this}}}
{{/each}}
{{else}}
Bugün için planlanmış herhangi bir takvim etkinliği görünmüyor. Belki kendine biraz zaman ayırabilirsin veya yeni planlar yapabilirsin!
{{/if}}

{{#if userTasksSummary.length}}
Sana Atanmış Görevlerin Durumu:
{{#each userTasksSummary}}
- {{{this}}}
{{/each}}
{{else}}
Şu anda sana atanmış aktif bir görev bulunmuyor. Harika bir fırsat, belki de yeni bir projeye başlamak için?
{{/if}}

Yönergeler:
1.  Kullanıcıyı ismiyle sıcak bir şekilde selamla. Örneğin: "Merhaba {{userName}}, harika bir gün başlıyor!" veya "Hey {{userName}}, bugünün yıldızı sensin!" gibi.
2.  Eğer varsa, bugünün takvim etkinliklerinden kısaca bahset. Onları hatırlatarak kullanıcıyı güne hazırlayabilirsin ("Unutma, bugün şu etkinliğin var..." gibi).
3.  Eğer varsa, kullanıcıya atanmış görevlerin genel durumuna (özellikle devam eden veya tamamlanmış olanlara) değin. Başarılarını kutlayabilir ("Şu görevini tamamlamışsın, tebrikler!") veya devam eden işler için motivasyon ("Proje X'te harika gidiyorsun, devam et!") verebilirsin.
4.  Tüm bu bilgileri kullanarak, kullanıcının o günkü durumuna uygun, kişiselleştirilmiş, motive edici, olumlu ve cesaretlendirici bir mesaj oluştur. Mesajın biraz esprili ve samimi olabilir.
5.  Mesajının sonunda "İyi çalışmalar!", "Harika bir gün geçir!", "Bugünün tadını çıkar!" veya benzeri pozitif bir kapanış yap.
6.  Eğer takvimde etkinlik yoksa veya atanmış proje/görev yoksa, bunu da olumlu bir şekilde ifade et. Kullanıcıya bu boş zamanı nasıl değerlendirebileceği konusunda nazikçe fikir verebilirsin. ("Bugün takvimin ve görev listen sakin görünüyor, bu enerjini yeni fikirlere veya dinlenmeye ayırmak için harika bir gün olabilir!").
7.  Mesajın toplamda çok uzun olmasın, genellikle 2-4 cümle yeterlidir.
8.  UNUTMA: Yanıtın SADECE ve SADECE belirtilen JSON formatında olmalıdır: { "message": "..." } Başka hiçbir metin, açıklama veya giriş cümlesi içermemelidir.
`,
});

export async function generateMotivationalMessage(input: MotivationalMessageInput): Promise<MotivationalMessageOutput> {
  console.log(`[AI Motivational Flow] ENTERING generateMotivationalMessage for user ${input.userName}`);
  console.log(`[AI Motivational Flow] Input to AI for user ${input.userName}: ${JSON.stringify(input, null, 2)}`);

  try {
    const response = await motivationalPrompt(input);
    const modelOutput = response.output; // Genkit 1.x: output is already parsed or undefined if parsing failed

    const rawContent = response.raw?.choices?.[0]?.message?.content ?? 'Raw response could not be obtained or was empty.';
    console.log(`[AI Motivational Flow] Raw AI response for user ${input.userName}:`, rawContent);
    console.log(`[AI Motivational Flow] Parsed AI output (modelOutput) for user ${input.userName}:`, modelOutput);

    if (modelOutput && typeof modelOutput.message === 'string' && modelOutput.message.trim() !== '') {
      console.log(`[AI Motivational Flow] Successfully generated AI motivational message for ${input.userName}.`);
      return modelOutput;
    }
    
    console.warn(`[AI Motivational Flow] AI message prompt returned null, empty, or malformed output for user ${input.userName}. Falling back. Raw content was: "${rawContent}"`);
    return { message: `Harika bir gün geçirmenizi dileriz, ${input.userName}! (Sistem varsayılan mesajı - AI Format Sorunu)` };

  } catch (promptError: any) {
    console.error(
      `[AI Motivational Flow] CRITICAL Error DURING motivationalPrompt call for user ${input.userName}. Error Name: ${promptError.name}, Message: ${promptError.message}. Stack: ${promptError.stack}. Input: ${JSON.stringify(input)}. Falling back.`,
    );
    return { message: `Merhaba ${input.userName}, motivasyon mesajı oluşturulurken bir sorunla karşılaşıldı (Kod: MOTIV_PROMPT_ERR_FULL). Lütfen daha sonra tekrar deneyin.` };
  }
}
