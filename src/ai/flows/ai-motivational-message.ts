'use server';
/**
 * @fileOverview An AI flow to generate a motivational message based on
 * the user's tasks and calendar events.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

// Original Schemas (keep these for the exported function's signature)
const OriginalMotivationalMessageInputSchema = z.object({
  userName: z.string().describe('The name of the user.'),
  todaysEvents: z.array(z.string()).optional().describe('A list of today\'s scheduled calendar event titles or summaries. Empty if no events.'),
  userTasksSummary: z.array(z.string()).optional().describe('A list of summaries for tasks assigned to the user, e.g., ["Proje X (Devam Ediyor)", "Proje Y (Tamamlandı)"]. Empty if no tasks.'),
});
export type MotivationalMessageInput = z.infer<typeof OriginalMotivationalMessageInputSchema>;

const MotivationalMessageOutputSchema = z.object({
  message: z.string().describe('The personalized and motivational message generated by the AI.'),
});
export type MotivationalMessageOutput = z.infer<typeof MotivationalMessageOutputSchema>;

// TEMPORARY Simplified Input Schema for the prompt
const SimplifiedPromptInputSchema = z.object({
  userName: z.string().describe('The name of the user.'),
});

const motivationalPrompt = ai.definePrompt({
  name: 'generateMotivationalMessagePrompt',
  input: { schema: SimplifiedPromptInputSchema }, // Use simplified schema here
  output: { schema: MotivationalMessageOutputSchema },
  prompt: `Sen son derece pozitif, esprili ve motive edici bir asistansın.
Çok Önemli: Yanıtın KESİNLİKLE ve SADECE aşağıdaki JSON formatında olmalıdır. JSON bloğunun ÖNCESİNDE veya SONRASINDA kesinlikle başka hiçbir metin, açıklama veya karakter olmamalıdır.
{
  "message": "üretilecek kişiselleştirilmiş ve motive edici mesaj buraya gelecek"
}
---
Kullanıcı Adı: {{userName}}

Yönergeler:
1. Mesajına doğrudan başla (Örn: "Günün enerjisi seninle olsun, {{userName}}!" veya "Hey {{userName}}, bugünün yıldızı sensin gibi!").
2. Genel olarak olumlu, motive edici ve belki biraz da esprili bir dil kullan.
3. Mesajı kısa ve öz tut (1-2 cümle ideal).
4. UNUTMA: Yanıtın SADECE ve SADECE belirtilen JSON formatında olmalıdır: { "message": "..." }
`,
});

// Exported function still accepts the original input type
export async function generateMotivationalMessage(input: MotivationalMessageInput): Promise<MotivationalMessageOutput> {
  console.log(`[AI Motivational Flow] ENTERING generateMotivationalMessage for user ${input.userName}`);
  try {
    // Prepare the simplified input for this temporary test
    const simplifiedPromptInputValue = { userName: input.userName };
    console.log(`[AI Motivational Flow] Calling motivationalPrompt for user ${input.userName}. Input to AI (SIMPLIFIED): ${JSON.stringify(simplifiedPromptInputValue, null, 2)}`);

    const response = await motivationalPrompt(simplifiedPromptInputValue); // Pass simplified input
    const modelOutput = response.output;

    const rawContent = response.raw?.choices?.[0]?.message?.content ?? 'Raw response could not be obtained or was empty.';
    console.log(`[AI Motivational Flow] Raw AI response for user ${input.userName}:`, rawContent);
    console.log(`[AI Motivational Flow] Parsed AI output (modelOutput) for user ${input.userName}:`, modelOutput);

    if (modelOutput && typeof modelOutput.message === 'string' && modelOutput.message.trim() !== '') {
      console.log(`[AI Motivational Flow] Successfully generated AI motivational message for ${input.userName}.`);
      return modelOutput;
    }
    
    console.warn(`[AI Motivational Flow] AI prompt returned null, empty, or malformed output for user ${input.userName}. Falling back.`);
    console.warn(`[AI Motivational Flow] Details: modelOutput.message was "${modelOutput?.message}". Raw content was: "${rawContent}"`);
    return { message: `Bugün harika işler başaracağına eminim, ${input.userName}! (Sistem varsayılan mesajı - AI FORMAT SORUNU)` }; // Specific fallback

  } catch (promptError: any) {
    console.error(
      `[AI Motivational Flow] CRITICAL Error DURING motivationalPrompt call for user ${input.userName}. Error: ${promptError.message}. Stack: ${promptError.stack}. Input (SIMPLIFIED, condensed): ${JSON.stringify({userName: input.userName})}. Falling back.`,
    );
    // More specific fallback message for this exact error path
    return { message: `Merhaba ${input.userName}, motivasyon mesajı oluşturulurken bir sorunla karşılaşıldı. (Kod: PROMPT_CALL_FAILED) Lütfen daha sonra tekrar deneyin veya sistem yöneticinize başvurun.` };
  }
}
