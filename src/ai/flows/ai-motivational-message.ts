
'use server';
/**
 * @fileOverview An AI flow to generate a motivational message.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

// Keep the original input schema for the function signature
const MotivationalMessageInputSchema = z.object({
  userName: z.string().describe('The name of the user.'),
  todaysEvents: z.array(z.string()).optional().describe("A list of today's scheduled calendar event titles or summaries. Can be empty."),
  userTasksSummary: z.array(z.string()).optional().describe('A list of summaries for tasks assigned to the user. Can be empty.'),
});
export type MotivationalMessageInput = z.infer<typeof MotivationalMessageInputSchema>;

const MotivationalMessageOutputSchema = z.object({
  message: z.string().describe('The personalized and motivational message generated by the AI.'),
});
export type MotivationalMessageOutput = z.infer<typeof MotivationalMessageOutputSchema>;

// Define a much simpler schema for the prompt itself for this test
const MinimalPromptInputSchema = z.object({
    userName: z.string(),
});

const minimalMotivationalPrompt = ai.definePrompt({
  name: 'minimalMotivationalMessageGenPrompt', // New unique name
  input: { schema: MinimalPromptInputSchema },
  output: { schema: MotivationalMessageOutputSchema },
  prompt: `You are a very positive assistant. Create a short, uplifting message for {{userName}}.
IMPORTANT: Your response MUST be ONLY a JSON object like this: {"message": "your uplifting message here"}. No other text.`,
});

export async function generateMotivationalMessage(input: MotivationalMessageInput): Promise<MotivationalMessageOutput> {
  console.log(`[AI Motivational Flow - ENTERING] User: ${input.userName}. Full input: ${JSON.stringify(input, null, 2)}`);

  try {
    // Pass only the userName to the minimal prompt
    const minimalInput = { userName: input.userName };
    console.log(`[AI Motivational Flow - CALLING PROMPT] With minimal input: ${JSON.stringify(minimalInput, null, 2)}`);

    const response = await minimalMotivationalPrompt(minimalInput);
    const modelOutput = response.output;

    // Safely access raw content
    let rawContent = 'Raw response content not available or empty.';
    if (response.raw && response.raw.choices && response.raw.choices.length > 0 && response.raw.choices[0].message) {
        rawContent = String(response.raw.choices[0].message.content) || 'Raw content was empty string.';
    } else if (response.raw) {
        rawContent = `Raw object present but choices/message structure not as expected: ${JSON.stringify(response.raw, null, 2)}`;
    }

    console.log(`[AI Motivational Flow - RAW RESPONSE] User: ${input.userName}. Raw content: "${rawContent}"`);
    console.log(`[AI Motivational Flow - PARSED OUTPUT] User: ${input.userName}. Parsed: ${JSON.stringify(modelOutput, null, 2)}`);

    if (modelOutput && typeof modelOutput.message === 'string' && modelOutput.message.trim() !== '') {
      console.log(`[AI Motivational Flow - SUCCESS] Generated message for ${input.userName}.`);
      return modelOutput;
    }
    
    console.warn(`[AI Motivational Flow - MALFORMED/EMPTY OUTPUT] User: ${input.userName}. Fallback. Parsed output was: ${JSON.stringify(modelOutput, null, 2)}. Raw content was: "${rawContent}"`);
    return { message: `Merhaba ${input.userName}, AI mesajı alınamadı (Yanıt Format Sorunu).` };

  } catch (promptError: any) {
    console.error(
      `[AI Motivational Flow - CRITICAL PROMPT ERROR] User: ${input.userName}.
      Error Name: ${promptError.name}
      Message: ${promptError.message}
      Input to prompt (minimal): ${JSON.stringify({ userName: input.userName }, null, 2)}
      Full Input to function: ${JSON.stringify(input, null, 2)}
      Stack: ${promptError.stack}`
    );
    return { message: `Merhaba ${input.userName}, AI mesajı oluşturulurken kritik bir sunucu hatası oluştu (Kod: PROMPT_EXEC_FAIL). Lütfen API anahtarınızı ve model erişiminizi kontrol edin.` };
  }
}
